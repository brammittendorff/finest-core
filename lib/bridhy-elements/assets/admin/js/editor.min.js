! function(e) {
    "use strict";
    
 
    elementor.on("panel:init", function() {
        if (e("#elementor-panel-elements-search-input").on("keyup", _.debounce(function() {
                e("#elementor-panel-elements").find(".hm").parents(".elementor-element").addClass("is-ha-widget")
            }, 100)), "undefined" != typeof $e || null !== $e) {
            var n = {
                callback: function() {
                    var e = elementor.settings.page.model.attributes.ha_grid;
                    "" === e ? elementor.settings.page.model.setExternalChange("ha_grid", "yes") : "yes" === e && elementor.settings.page.model.setExternalChange("ha_grid", "")
                }
            };
            $e.shortcuts.register("ctrl+shift+g", n), $e.shortcuts.register("cmd+shift+g", n)
        }
        
    }), elementor.hooks.addFilter("panel/elements/regionViews", function(e) {
        if (UxthemeElementsEditor.hasPro || _.isEmpty(UxthemeElementsEditor.placeholder_widgets)) return e;
        var t, n, o = e.elements.view,
            i = e.categories.view,
            a = e.elements.options.collection,
            r = e.categories.options.collection,
            s = [];
        return _.each(UxthemeElementsEditor.placeholder_widgets, function(e, t) {
            a.add({
                name: "ha-" + t,
                title: e.title,
                icon: e.icon,
                categories: ["bridhy_elements_pro"],
                editable: !1
            })
        }), a.each(function(e) {
            "bridhy_elements_pro" === e.get("categories")[0] && s.push(e)
        }), n = r.findIndex({
            name: "bridhy_elements_category"
        }), n && r.add({
            name: "bridhy_elements_pro_category",
            title: "Uxtheme Elments Pro",
            icon: "hm hm-UxthemeElements",
            defaultActive: !1,
            items: s
        }, {
            at: n + 1
        }), t = {
            className: function() {
                var e = this.constructor.__super__.className.call(this);
                return !this.isEditable() && this.isHappyWidget() && (e += " ha-element--promotion"), e
            },
            isHappyWidget: function() {
                return 0 === this.model.get("name").indexOf("ha-")
            },
            onMouseDown: function() {
                if (!this.isHappyWidget()) return elementor.promotion.dialog.buttons[0].removeClass("ha-btn--promotion"), void this.constructor.__super__.onMouseDown.call(this);
                elementor.promotion.dialog.buttons[0].addClass("ha-btn--promotion"), elementor.promotion.showDialog({
                    headerMessage: haGetTranslated("promotionDialogHeader", [this.model.get("title")]),
                    message: haGetTranslated("promotionDialogMessage", [this.model.get("title")]),
                    top: "-7",
                    element: this.el,
                    actionURL: "https://demo.UxthemeElements.com/"
                })
            }
        }, e.elements.view = o.extend({
            childView: o.prototype.childView.extend(t)
        }), e.categories.view = i.extend({
            childView: i.prototype.childView.extend({
                childView: i.prototype.childView.prototype.childView.extend(t)
            })
        }), e
    });
    
    
    var n = elementor.modules.controls.Select2.extend({
        onBeforeRender: function() {
            if (this.container && "section" === this.container.type) {
                var t = elementor.widgetsCache || elementor.config.widgets,
                    n = {};
                this.container.children.forEach(function(o) {
                    o.view.$childViewContainer.children("[data-widget_type]").each(function(o, i) {
                        var a = e(i).data("widget_type"),
                            a = a.slice(0, a.lastIndexOf(".")),
                            r = !_.isUndefined(t[a]) && t[a];
                        r && (n[r.widget_type] = r.title + " (" + r.widget_type + ")")
                    })
                }), this.model.set("options", n)
            }
        }
    });
    elementor.addControlView("widget-list", n);
    var o = elementor.modules.controls.BaseData.extend({
        getSelect2Placeholder: function() {
            return this.ui.select.children('option:first[value=""]').text() || this.model.get("placeholder")
        },
        getSelect2DefaultOptions: function() {
            var t = this;
            return {
                allowClear: !0,
                placeholder: this.getSelect2Placeholder(),
                dir: elementorCommon.config.isRTL ? "rtl" : "ltr",
                minimumInputLength: 1,
                ajax: {
                    url: ajaxurl,
                    dataType: "json",
                    method: "POST",
                    delay: 250,
                    data: function(n) {
                        var o = {
                            nonce: UxthemeElementsEditor.editor_nonce,
                            action: "ha_process_dynamic_select",
                            object_type: "post",
                            query_term: n.term
                        };
                        return e.extend(o, t.model.get("dynamic_params"))
                    },
                    processResults: function(e) {
                        if (!e.success || 0 === e.data.length) return {
                            results: [{
                                id: -1,
                                text: "No results found",
                                disabled: !0
                            }]
                        };
                        var t = [];
                        return _.each(e.data, function(e, n) {
                            t.push({
                                id: n,
                                text: e
                            })
                        }), {
                            results: t
                        }
                    },
                    cache: !0
                }
            }
        },
        getSelect2Options: function() {
            return e.extend(this.getSelect2DefaultOptions(), this.model.get("select2options"))
        },
        addLoadingSpinner: function() {
            this.$el.find(".elementor-control-title").after('<span class="elementor-control-spinner">&nbsp;<i class="eicon-spinner eicon-animation-spin"></i>&nbsp;</span>')
        },
        onBeforeRender: function() {
            if (!this.isRendered) {
                var t = this,
                    n = this.getControlValue();
                if (!_.isEmpty(n)) {
                    _.isArray(n) || (n = [n]);
                    var o = {
                        nonce: UxthemeElementsEditor.editor_nonce,
                        action: "ha_process_dynamic_select",
                        object_type: "post",
                        saved_values: n
                    };
                    e.ajax({
                        url: ajaxurl,
                        type: "POST",
                        data: e.extend(o, t.model.get("dynamic_params")),
                        beforeSend: t.addLoadingSpinner.bind(this),
                        success: function(n) {
                            if (n.success && 0 !== n.data.length) {
                                var o = o = _.keys(n.data).map(function(t) {
                                    return " " + e.trim(t)
                                });
                                t.container.settings.set(t.model.get("name"), o), t.model.set("options", n.data), t.render()
                            }
                        }
                    })
                }
            }
        },
        applySavedValue: function() {
            elementor.modules.controls.BaseData.prototype.applySavedValue.apply(this, arguments), this.ui.select.data("select2") ? this.ui.select.trigger("change") : (this.ui.select.select2(this.getSelect2Options()), this.model.get("sortable") && this.initSortable())
        },
        initSortable: function() {
            var e = this.$el.find("ul.select2-selection__rendered"),
                t = this;
            e.sortable({
                containment: "parent",
                update: function() {
                    t._orderSortedOption(e), t.container.settings.setExternalChange(t.model.get("name"), t.ui.select.val()), t.model.set("options", t.ui.select.val())
                }
            })
        },
        _orderSortedOption: function(t) {
            var n = this;
            t.children("li[title]").each(function(t, o) {
                var i = n.ui.select.children("option").filter(function() {
                    return e(this).html() == o.title
                });
                n._moveOptionToEnd(i)
            })
        },
        _moveOptionToEnd: function(e) {
            var t = e.parent();
            e.detach(), t.append(e)
        },
        onBeforeDestroy: function() {
            this.ui.select.select2("destroy"), this.$el.remove()
        }
    });
    elementor.addControlView("ha_advanced_select2", o)
}(jQuery);